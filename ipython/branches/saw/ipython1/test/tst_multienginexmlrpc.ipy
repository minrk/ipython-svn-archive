#-------------------------------------------------------------------------------
# Imports
#-------------------------------------------------------------------------------

import time

from ipython1.kernel.multienginexmlrpc import XMLRPCInteractiveMultiEngineClient as client
from ipython1.kernel import magic

#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------

c = client(('127.0.0.1',10105))
c.activate()
c.block = True
c.getIDs()
assert len(c) >= 4

#-------------------------------------------------------------------------------
# Blocking execution
#-------------------------------------------------------------------------------

# Execute

c.iexecuteAll('a=5')
c.iexecute([0,2],'b=10')
c.iexecute([1,3],'b=20')
c.iexecuteAll('c=a*b')

# Magics

%px import math
%px a = math.sin(math.pi)

%autopx

import math
def compute(x):
    return math.pow(x, 2.0)


%autopx


for i in c.getIDs():
    c.iexecute(i, 'myresult = compute(%i)' % i)

%result

# Push/pull

c.pushAll(a=10, b=20)
c.pullAll('a', 'b')
c.pullAll('a')
c.push([0,1], c=range(5))
c.push([2,3], c=range(5))
c.pullAll('c')

# getResult/reset

c.iexecuteAll('import math; print math.pi')
c.igetResultAll()
c.resetAll()
c.iexecuteAll('a=5')
c.iexecuteAll('b=10')
c.igetResultAll(0)
c.igetResultAll(1)
print "keys: ", c.keysAll()

# Queue management

c.iexecuteAll('import time')
for i in range(100):
    c.iexecuteAll('time.sleep(0.01)', block=False)


c.iqueueStatusAll()
c.clearQueueAll()
c.iqueueStatusAll()

# scatter/gather

c.scatterAll('a', range(20))
c.gatherAll('a')

# map

c.mapAll('lambda x: 2.0*x', range(20))

# Using the .r attribute to simplify computations
ipc.block = False
ipc.executeAll('x=1')
x = ipc.pullAll('x')
x = x.r  # this will block
print sum(x)



