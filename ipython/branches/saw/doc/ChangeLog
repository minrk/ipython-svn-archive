2007-06-17  Brian Granger <ellisonbg@gmail.com>

	* ipython1.kernel.task.py: Created a new TaskResult object
	that is returned when getTaskResult is called.  This new 
	object provide a much simpler and intuitive way of accessing
	the results of a task.  The variables that are pulled back
	are available as attributes of the TaskResult object.  There
	are also engineID, taskID attributes.  Failures are handled 
	through a failure attribute, but remote exceptions can also
	be reraised by calling the raiseException method.
	
	* ipython1.kernel.taskclient/taskxmlrpc.py:  Minor changes to reflect
	new TaskResult object that is returned by getTaskResult.
	
	* doc/examples: Updated TaskController examples to use new
	TaskResult object.

2007-06-16  Brian Granger <ellisonbg@gmail.com>

	* Merged in work from core-refactor branch.
	
	* Copied the recently added core1 into core and made a few
	changes to make it work well with the engine/controller stuff.
	
	* ipython1.core.interpreter.py: Added option for having execute
	actually raise any exceptions that it gets.  Made sure that
	SyntaxError/IndentationError is raised upon compilation.  Added
	reset and getResult.  All the changes in core should eventually
	be merged in with core1.
	
	* ipython1.kernel.engineservice.py: Converted the basic engine
	stuff to use the new core.  Added more informative tracebacks
	to all the engine methods.  We are basically putting the 
	traceback string in into the value of the exception so that
	the user can get it.  The value of the exception also has
	very verbose messages to help users track down problems in
	their code.
	
	* ipython1.test: updated tests to work with the new core.  
	Added a new testgenerator.py to make writing tests easier.


2007-04-02  Brian Granger <ellisonbg@gmail.com>

	* ipython1.kernel.multiengine.py: Improve documentation
	and test coverage.
	
	* ipython1.kernel.multienginexmlrpc.py:  Reduced boilerplate code
	using decorators.  Improve documentation and tests.  Misc 
	debugging.
	
	* ipython1.kernel.multiengineclient.py:  Got rid of ifoo methods
	and replaced them by types with custom __repr__ methods.  ipull
	is now zipPull.  Got rid of slicing and indexing notation in 
	client class.  It led to an API that was simply too complex.


2007-03-20  Brian Granger <ellisonbg@gmail.com>

	* ipython1.kernel.controllerservice.py: Improve documentation
	and test coverage for the base controller implementation.

2007-03-03  Fernando Perez  <Fernando.Perez@colorado.edu>

	* ipython1/test/mkdoctests.py: Improve documentation for this
	script, fix a few bugs with filename handling.

2007-02-24  Fernando Perez  <Fernando.Perez@colorado.edu>

	* ipython1/kernel/magic.py (pxrunsource): Don't disable %autopx on
	exceptions, just show the traceback.  Right now the actual tb is
	bogus (it contains local rather than remote info), but the
	exception type and message ARE correct, so it is useful.

	* ipython1/test/mkdoctests.py (main): Improve support for easily
	making standalone .txt files without a template that calls %run,
	just using a regular .py/.ipy file.

2007-02-16  Brian Granger <ellisonbg@gmail.com>

	* multiengine, multienginepb: now testing the targets argument using
	verifyTargets in the MultiEngine itself.  Specific network protocols
	can also test if they want, but _any_ multiengine should now raise
	InvalidEngineID if targets is bad in any way.  Added tests for this.
	
	* config.objects, ipcontroller: there is now the notion of a default
	network interface for each controller interface.  The port/ip of the 
	default connection can now be set using command line flags to 
	ipcontroller.  See config.objects for info on how the default is
	determined.  For now the default is pb.

2007-02-15  Brian Granger <ellisonbg@gmail.com>

	* kernel.pbutil, kernel.enginepb, kernel.multienginepb: added
	rigorous message size testing.  Now any push/pull/scater/gather
	that exceeds pbconfig.banana.SIZE_LIMIT will raise a
	PBMessageSizeError that propagates back to the user.
	
	* kernel.multienginepb:  added calls to verifyTargets at the
	start of every remote_foo method to ensure that we have a valid
	targets argument.  If not InvalidEngineID is raised.  While
	this does require a client-controller communication, it does a
	real check against the list of registered engines as well as checks
	that targets is an int, 'all' or a list of ints.
	
	* kernel.config, ipengine, ipcontroller: updated config system to
	reflect new design of controller.  All controller interfaces are
	now treated on equal ground.  The new defaults can be found in
	config.objects.  I now also have config options for import state-
	ments that get run when the engine and controller get started.
	
	* multiengineclient: made block=True by default. 

2007-02-13  Brian Granger <ellisonbg@gmail.com>

	* Now the registerEngine method of the ControllerService takes the
	ip, port and pid of the engine and logs them to a file in 
	~/.ipython/log named ipcontroller-###-engine-info.log.  This is 
	to make it easier to kill engines.  Fixes ticket #111.


2007-01-30  Fernando Perez  <Fernando.Perez@colorado.edu>

	* helpers/update_web2: helper script to keep our private copy of
	Twisted's web2 in sync with SVN.  We're shipping it privately so
	that our users can use an official Twisted release (>=2.5).  Once
	Twisted releases Web2 into their core distribution and this
	becomes unnecessary, we'll remove our private copy.

2007-01-27  Fernando Perez  <Fernando.Perez@colorado.edu>

	* ipdoctest.py (IPDocTestRunner): major extensions to doctest that
	add real IPython support.

2006-01-24  Brian Granger <ellisonbg@gmail.com>

	This covers commits over the last month and a half.  During this
	time the mainline development has moved to the saw branch.  From 
	here out, the saw branch should be used.  However, it should be noted
	that certain things that worked in the chainsaw branch are being
	depreciated in the saw branch:
	
	* All the vanilla protocols are being depreciated.  This is because
	they do not propagate errors properly.  With this said, they should
	still work for most things our interactive RemoteController class
	still uses this protocol.  Until we have a full PB or XML-RPC
	replacement for this client, the vanilla client will remain the
	default in kernel.api.  
	
	* The global setting of a MAX_MESSAGE_SIZE variable for network
	protocols.  Currently, this should be set internally to each specific
	network protocol.  I have created a pbconfig.py file that sets it 
	for any PB users.
	
	The saw branch has significant changes to the way errors are handled:
	
	* Errors are now propagated fully in the PB protocols and we now have
	tests to make sure that errors do propagate properly.
	
	* Our error propagation mechanism insures that the type of the 
	exception in preserved and that *some* reasonable message is given
	to the user.  The message still needs work though.
	
	* Remote exceptions should always raise in the users namespace.
	
	* Exceptions are always agressive.  If one of many actions fail they the
	overall action will fail upon the first failure.
	
	* A failure in a QueuedEngine method will clear the queue of any pending 
	commands.
	
	Design and API changes:
	
	* The controller has been factored into downward (towards the engines) and upward
	(towards the client) interfaces.  This is done to make it easy to adapt the basic
	controller to different interfaces.  Our current one is the multiengine interface.
	
	* The notification API has been completely removed from the controller.  Different
	controller interfaces should add this in as needed.
	
	New Features:
	
	* New blockon modules that makes Deferreds synchronous.
	
	* New PB client that uses blockon.
	
	* Many new tests.
	
	* New testing tools that integrate doctests and unittests and allow IPython code
	to be tested :)

2006-11-13  Fernando Perez  <Fernando.Perez@colorado.edu>

	* ipython1/kernel/controllervanilla.py (RemoteController.execute):
	small optimization to the unpacking, the newlines in the
	stdout/err can be ommitted just by using the 'print x,' syntax
	with a trailing comma.

2006-11-10  Fernando Perez  <Fernando.Perez@colorado.edu>

	* scripts/ipcluster (parse_args): Added a script to more
	conveniently manage clusters.  Still incomplete, but already
	useful for working on a local multiprocessor machine.

2006-11-09  Fernando Perez  <Fernando.Perez@colorado.edu>

	* ipython1/tools/utils.py: New directory for general-purpose tools
	which don't really fit anywhere else.  Similar to genutils in
	trunk, but as a directory so we can organize a bit more as time
	goes by.

2006-04-10  Brian Granger <ellisonbg@gmail.com>
 
    * ipython1/test: Setup a test directory as a sub-module of
    ipython1.  This makes it possible to test ipython1 using Twisted's
    trial command:

    trial ipython1

    This command will find and run the unittests in the test module 
    in files named tests_*.py.  Most importantly, it will manage the 
    Twisted reactor and deferreds.  I have written initial tests for 
    ipython1.core.shell.py.

    * ipython1/kernel: I have begun to write the code for the two process 
    kernel.  I need to write unittests for this stuff.

2006-04-03  Brian Granger <ellisonbg@gmail.com>

    * core/shell.py: Began to rework the TrappingInteractiveConsole class
    into something that will become the IPython core.

2006-02-14  Brian Granger <ellisonbg@gmail.com>

    * kernel_client.py: Added a block property to the InteractiveCluster
    class.  When this is set, calls to execute() will block and print
    stdin/stdout/stderr.  It also sets the block attribute on the 
    RemoteKernels in the cluster.

    * kernel_client.py: Renamed "worker" and "workers" to "kernel"
    and "kernels" to better reflect the naming of things.
        
    * kernel_magic.py: Made block=False by default for auto-executed
    code.

2006-02-11  Brian Granger <ellisonbg@gmail.com>

    * Renamed vectorfunction.py to parallelfunction.py

    * parallelfunction.py, README, kernelclient.py: Renamed all usages
    of VectorFunction to ParallelFunction to better reflect what it does.

    * kernelclient.py: Fixed intermodule imports.

2006-02-11  Brian Granger <ellisonbg@gmail.com>

    * ChangeLog: Started the ChangeLog for ipython1.

