#!/usr/bin/env pythonw
"""An ipython kernel that is integrated with the wxPython event loop.

This kernel is designed for users who want to use wxPython interactively from
within ipython.  When this kernel is running, the user can import wx and then
interactively create and use wx widgets.  

This kernel should only be used if wx integration is needed.  This is because
this kernel lacks many features that the default kernel has, such as being
multithreaded and having a computational queue.

This module is meant to be run from the command line.  To start the kernel,
issue the command:

    python kernelwx.py

This will start the kernel listening on port 10105 (the default) and will allow
connections from only the localhost (127.0.0.1).  Here is an example that starts
the kernel on port 10106

    python kernelwx.py -p 10106

For more information on the command line options, run:

    python kernelwx.py -h

NOTE:  The kernel cannot currently be run in the background, so:

    python kernelwx.py &

won't result in a running kernel instance.

NOTE:  On Mac OS X, the command pythonw must be used instead of python.
"""

#*****************************************************************************
#       Copyright (C) 2005  Brian Granger, <bgranger@scu.edu>
#                           Fernando Perez. <fperez@colorado.edu>
#
#  Distributed under the terms of the BSD License.  The full license is in
#  the file COPYING, distributed as part of this software.
#*****************************************************************************

# MPI module should be loaded first

import sys
from IPython.genutils import get_home_dir
ipython_path = get_home_dir() + '/.ipython'
sys.path.append(ipython_path)
try:
    import mpi_init_module
except ImportError:
    mpi_module = None
else:
    mpi_module = mpi_init_module.mpi
            
import cPickle as pickle
from optparse import OptionParser
import socket

from wxPython.wx import *

from twisted.internet import threadedselectreactor, protocol, defer
threadedselectreactor.install()
from twisted.internet import reactor
from twisted.python import log

from ipython1.kernel.kernelcore import ThreadlessKernelTCPFactory
from ipython1.startup.callback import CallbackClientFactory

MAX_PORT_TRIES = 256

# Here are the classes for wxPython

ID_EXIT  = 101

class MyFrame(wxFrame):
    def __init__(self, parent, ID, title):
        wxFrame.__init__(self, parent, ID, title, wxDefaultPosition, 
            wxSize(300, 200))
        menu = wxMenu()
        menu.Append(ID_EXIT, "E&xit", "Terminate the program")
        menuBar = wxMenuBar()
        menuBar.Append(menu, "&File")
        self.SetMenuBar(menuBar)
        EVT_MENU(self, ID_EXIT,  self.DoExit)

        reactor.interleave(wxCallAfter)

    def DoExit(self, event):
        print true
        reactor.addSystemEventTrigger('after', 'shutdown', self.Close, true)
        reactor.stop()


class MyApp(wxApp):

    def OnInit(self):
        frame = MyFrame(NULL, -1, "IPython Kernel: wxPython Enabled")
        frame.Show(true)
        self.SetTopWindow(frame)
        return true


def try_ports(port, factory_class, controllerIP,
    controllerPort):

    for k in range(MAX_PORT_TRIES):
        try:
            p = reactor.listenTCP(port + k, 
            factory_class(mpi=mpi_module))
        except (error.CannotListenError, socket.error):
            if k == MAX_PORT_TRIES - 1:
                log.msg("Cannot start kernel")
                reactor.stop()
        else:
            break

    if controllerIP:
        myIPAddress = socket.gethostbyname(socket.gethostname())
        myPort = p.getHost().port
        ccf = CallbackClientFactory((myIPAddress, myPort), 
            tries=3, delay=5.0)
        reactor.connectTCP(controllerIP, controllerPort, ccf)

def main(port, controllerIP, controllerPort):
    factory_class = ThreadlessKernelTCPFactory
    log.startLogging(sys.stdout)
    reactor.callWhenRunning(try_ports, port, 
        factory_class, controllerIP, controllerPort)
        
    # Start wx, which start the reactor using reactor.interleave
    app = MyApp(0)
    app.MainLoop()

def start(port=10105, controllerIP="", controllerPort=12001):
    parser = OptionParser()
    parser.set_defaults(port=port, controllerIP=controllerIP,
        controllerPort=controllerPort)
    parser.add_option("-p", "--port", type="int", dest="port",
        help="the TCP port the kernel will try to listen on")
    parser.add_option("-C","--controller-ip",type="string",
        dest="controllerIP",
        help="ip address of the controller that should be notified")
    parser.add_option("-L","--controller-port",type="int",
        dest="controllerPort",
        help="port of the controller that should be notified")

    (options, args) = parser.parse_args()

    main(options.port, options.controllerIP, 
        options.controllerPort)

if __name__ == '__main__':
    start()
    
 
