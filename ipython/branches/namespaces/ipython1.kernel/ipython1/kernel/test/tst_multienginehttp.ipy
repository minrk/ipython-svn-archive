#-------------------------------------------------------------------------------
# Imports
#-------------------------------------------------------------------------------

import time
import numpy

import ipython1.kernel.magic
import ipython1.kernel.multienginehttp as meh
from ipython1.kernel.error import *

rc = meh.HTTPInteractiveMultiEngineClient(('127.0.0.1',8000))

#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------

rc.activate()
rc.block = True
rc.getIDs()
n = len(rc)
assert n >= 4, "Not Enough Engines: %i"%n

values = [
    10,
    1.0,
    range(100),
    ('asdf', 1000),
    {'a': 10, 'b': 20}
    ]

keys = ['a','b','c','d','e']

sequences = [
    range(100),
    numpy.arange(100)
]

#-------------------------------------------------------------------------------
# Blocking execution
#-------------------------------------------------------------------------------

# Execute

rc.executeAll('import math')
rc.executeAll('a = 2.0*math.pi')
rc.executeAll('print a')

for id in rc.getIDs():
    rc.execute(id, 'b=%d' % id)


rc.executeAll('print b')

try:
    rc.execute(-1, 'b = 10')
except InvalidEngineID:
    print "Caught invalid engine ID OK."

try:
    rc.executeAll('1/0')
except ZeroDivisionError:
    print "Caught 1/0 correctly."


%px print a, b
try:
    %px 1/0
except ZeroDivisionError:
    print "Caught 1/0 correctly."

%autopx

import numpy
a = numpy.random.rand(4,4)
a = a+a.transpose()
print numpy.linalg.eigvals(a)

%autopx

rc.magicTargets = [0,2]
%px a = 5
rc.magicTargets = [1,3]
%px a = 10
rc.magicTargets = 'all'
%px print a


# Push/Pull

rc.pushAll(a=10, b=30, c={'f':range(10)})
rc.pullAll('a', 'b')
rc.zipPullAll('a', 'b')

for id in rc.getIDs():
    rc.push(id, **dict(a=id))


for id in rc.getIDs():
    rc.pull(id, 'a')


rc.pullAll('a')


rc['a'] = 100
rc['a']

# getResult/reset/keys

rc.getResultAll()
%result
rc.keysAll()
rc.resetAll()
rc.keysAll()

try:
    %result
except IndexError:
    print "Caught IndexError ok."


%px a = 5
rc.getResultAll(0)
rc.keysAll()

# Queue management methods

%px import time
prs = [rc.executeAll('time.sleep(2.0)',block=False) for x in range(5)]


rc.queueStatusAll()
time.sleep(3.0)
rc.clearQueueAll()
rc.queueStatusAll()
time.sleep(2.0)
rc.queueStatusAll()

rc.barrier(*prs)

for pr in prs:
    try:
        pr.r
    except QueueCleared:
        print "Caught QueueCleared OK."


# scatter/gather

rc.scatterAll('a', range(10))
rc.gatherAll('a')
rc.scatterAll('b', numpy.arange(10))
rc.gatherAll('b')

#-------------------------------------------------------------------------------
# Non-Blocking execution
#-------------------------------------------------------------------------------

rc.block = False

# execute

pr1 = rc.executeAll('a=5')
pr2 = rc.executeAll('import sets')

rc.barrier(pr1, pr2)

pr1 = rc.executeAll('1/0')
pr2 = rc.executeAll('c = sets.Set()')

rc.barrier()
try:
    pr1.r
except ZeroDivisionError:
    print "Caught ZeroDivisionError OK."

pd = rc.executeAll("print 'hi'")
pd.r

pd = rc.executeAll('1/0')
try:
    pd.r
except ZeroDivisionError:
    print "Caught ZeroDivisionError OK."

# Make sure we can reraise it!
try:
    pd.r
except ZeroDivisionError:
    print "Caught ZeroDivisionError OK."  

# push/pull

pd1 = rc.pushAll(a=10)
pd1.getResult()
pd2 = rc.pullAll('a')
pd2.r




# This is a command to make sure the end of the file is happy.

print "The tests are done!"
