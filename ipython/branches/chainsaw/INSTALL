===========================
IPython Kernel Installation
===========================

:Author:  Brian E. Granger
:Contact: ellisonbg@gmail.com
:Date: August, 2006

.. contents::

Introduction
============

This INSTALL file describes the steps required to install the Ipython kernel.  The For a description of the kernel, see the README file in this directory.

The IPython kernel requires four things:

1. A current version of IPython
2. Zope Interface
3. Twisted
4. The kernel itself

For MPI support, two additional things are needed:

1. An MPI implementation compiled as a shared library
2. A was of calling MPI from Python

Installation Instructions
=========================

IPython
-------

First, download and install the current version of ipython:

http://ipython.scipy.org

Zope Interface
--------------

Next, download and install the zope.interface package:

http://www.zope.org/Products/ZopeInterface

We are using some new features of zope.interface so get version
3.1.0c1 or greater.

Twisted
-------

Download and install the latest version of Twisted:

http://www.twistedmatrix.com
    
IPython Kernel
--------------

The latest prototype of the IPython kernel can be retrieved from the IPython subversion repository with the command.

::

    svn co http://ipython.scipy.org/svn/ipython/ipython/branches/chainsaw ipython1
    cd ipython1
    python setup.py build
    python setup.py install

In addition to installing the ipython1 python package, this will also install a few scripts for starting the kernel into an appropriate location.  To control where these scripts are installed, you can do the following:

::

    python setup.py install_scripts --install-dir=/some/other/bin

MPI Support
-----------

The IPython kernel includes MPI support.  With MPI support IPython engines can pass data between each other using MPI.  There are many ways to call MPI from within Python:

1. Call into an MPI shared library directly using ctypes
2. Use one of the many Python/MPI bindings such as mpi4py
3. Call wrapped C/C++/Fortran code that itself calls MPI

For any of these options to work, MPI must be initialized by a call to
MPI_Init().  Here is how this is handled in ipython1.  

1.  When an engine is started, it trys to import a module named mpi_init_module in your ~/.ipython directory.  
2.  mpi_init_module must import a module that calls MPI_Init().
3.  The module that calls MPI_Init() should be imported as 'mpi' and should
define two attributes, rank and size, which are the MPI rank and size.
4.  If the engine can import mpi_init_module, it passes the mpi variable
onto the EngineService.
4.  When the engine connects to a controller it requests an id that is 
the same as its mpi.rank.

From this point on, you can make calls to MPI using whatever means you wish.
As of this point, we have tested this approach using two mpi modules: 
mpi4py and our own mpi module, ipython1.kernel.mpi.  For these two
options, mpi_init_module should read:

from ipython1.kernel import mpi			# For ipython1.kernel.mpi

or 

from mpi4py import MPI as mpi

Our ipython1.kernel.mpi module is not a full MPI wrapper.  It only calls
MPI_Init() and sets the rank and size attributes.  Thus it will only be
useful if you want to use MPI using ctypes or from compiled code.

By default, the ipython1.kernel.mpi module is not built.  To build it,
give the build command

python setup.py build --mpicc=your mpicc command




  
