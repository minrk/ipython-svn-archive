===========================
IPython Kernel Installation
===========================

:Author:  Brian E. Granger
:Contact: ellisonbg@gmail.com
:Date: August 29, 2006

.. contents::

Introduction
============

This INSTALL file describes the steps required to install the IPython kernel.  For a description of the kernel, see the README file in this directory.

The IPython kernel requires four things:

1. The IPython1 package that contains the kernel
2. A current version of IPython
3. Zope Interface
4. Twisted

If you are comfortable using subversion and installing Python packages, you can probably just get and install these packages without further instructions  If not, read on.

To get these packages, you will need Subversion (or svn).  Many systems will already have Subversion installed; if you need more information about Subversion, see http://svnbook.red-bean.com/.

There are also a number of optional dependencies that provide additional capabilities.

We also provide a script in this directory called getdependencies.sh that will download (but not install) the dependencies into the parent directory.

Installation Instructions
=========================

Unless otherwise stated, all of the following packages can be installed by changing to the source directory and issuing the command:

::

	python setup.py install
	
To install into the site-packages directory of your system Python you will need admin privileges.  If you do not have such privileges, you can use set a --home flag when you install to select a different directory for your packages:

::

	python setup.py install --home=some-dir-in-your-PYTHONPATH
	
Your will then need to set you PYTHONPATH environment variable to point to this directory.
More information about installing Python packages can be found in the Python documentation at http://docs.python.org/.

IPython Kernel
--------------

The latest prototype of the IPython kernel can be retrieved from the IPython Subversion repository with the command:

::

    svn co http://ipython.scipy.org/svn/ipython/ipython/branches/chainsaw ipython1

In addition to installing the ipython1 python package, this will also install a few scripts for starting the kernel into an appropriate location.  To control where these scripts are installed, you can do the following:

::

    python setup.py install_scripts --install-dir=/some/other/bin
	
IPython
-------

First, download and install the current version of IPython:

http://ipython.scipy.org

You can also get the trunk version using Subversion:

::

	svn co http://ipython.scipy.org/svn/ipython/ipython/trunk ipython

Zope Interface
--------------

Next, download and install the zope.interface package: http://www.zope.org/Products/ZopeInterface.

We recommend the 3.1.0c1 build:

http://www.zope.org/Products/ZopeInterface/3.1.0c1/ZopeInterface-3.1.0c1.tgz

Earlier builds won't work, but more recent ones probably will.

Twisted
-------

Get the trunk version of Twisted using Subversion:

::

	svn co svn://svn.twistedmatrix.com/svn/Twisted/trunk Twisted
	
Nevow (Optional)
----------------

Nevow is a web development framework that is based on Twisted.  Nevow is an optional dependency that is only needed if you want to have a nice Ajaxy web interface to the IPython Controller and Engines.  You should get the trunk version of Nevow at the same time you get Twisted as they are developed in parallel:

::

	svn co http://divmod.org/svn/Divmod/trunk/Nevow/ Nevow 

Configuration
=============

IPython1 uses configuration files and objects to configure itself.  Information about the basic configuration objects, their options and default values can be found in ipython1.config.objects.  Tools for working with these objects are provided in the other
ipython1.config submodules.

Testing
=======

Once you have completed the installation of the IPython1 kernel you can run our test suite with the command:

::

	trial ipython1
	
The trial command is part of Twisted and allows asynchronous network based applications to be tested using python's unittest framework.  Please let us know if the tests do not pass.

MPI Support
===========

The IPython kernel includes MPI support.  With MPI support IPython engines can pass data between each other using MPI.  There are many ways to call MPI from within Python:

1. Call into an MPI shared library directly using ctypes
2. Use one of the many Python/MPI bindings such as mpi4py
3. Call wrapped C/C++/Fortran code that itself calls MPI

For any of these options to work, MPI must be initialized by a call to
MPI_Init().  Here is how this is handled in ipython1.  

1.  When an engine is started, it trys to find a configuration variable called mpiImportStatement that is a string which, when executed import an mpi module.
2.  The mpi module must call MPI_Init() when it is imported.
3.  The module that calls MPI_Init() should be imported as 'mpi' and should define two attributes, rank and size, which are the MPI rank and size.
4.  If the engine is successful in importing the mpi module, it passes the mpi variable onto the EngineService.
5.  When the engine connects to a controller it requests an id that is the same as its mpi.rank.

From this point on, you can make calls to MPI using whatever means you wish.
As of this point, we have tested this approach using two mpi modules: 
mpi4py and our own mpi module, ipython1.kernel.mpi.  For these two
options, the mpiImportStatement configuration variable should read:

::

	mpiImportStatement = 'from ipython1.kernel import mpi'

	mpiImportStatment = 'from mpi4py ipmort MPI as mpi'

Our ipython1.kernel.mpi module is not a full MPI wrapper.  It only calls
MPI_Init() and sets the rank and size attributes.  Thus it will only be
useful if you want to call MPI using ctypes or from compiled code.

By default, the ipython1.kernel.mpi module is not built.  To build it,
give the build command

::

	python setup.py build --mpicc=your-mpicc-command




  
