#!/usr/bin/env python
"""The ipython controller.
"""

#-------------------------------------------------------------------------------
#       Copyright (C) 2005  Fernando Perez <fperez@colorado.edu>
#                           Brian E Granger <ellisonbg@gmail.com>
#                           Benjamin Ragan-Kelly <<benjaminrk@gmail.com>>
#
#  Distributed under the terms of the BSD License.  The full license is in
#  the file COPYING, distributed as part of this software.
#-------------------------------------------------------------------------------

import sys, time
from optparse import OptionParser

from twisted.internet import reactor, error
from twisted.python import log

from ipython1.kernel import controllerservice
import ipython1.config.api as config

controllerConfig = config.getConfigObject('controller')

def main():
    log.startLogging(sys.stdout)
    
    cs = controllerservice.ControllerService()
    efac = controllerConfig.engineServerProtocolInterface(cs)
    efac.MAX_LENGTH = controllerConfig.maxMessageSize
    reactor.listenTCP(
        port=controllerConfig.listenForEnginesOn[1],
        factory=efac,
        interface=controllerConfig.listenForEnginesOn[0])
    for ci in controllerConfig.clientInterfaces:
        fac = ci[0](cs)
        fac.MAX_LENGTH = controllerConfig.maxMessageSize
        reactor.listenTCP(
            port=ci[1][1],
            factory=fac,
            interface=ci[1][0])
    cs.startService()
    reactor.run()

def start():
    parser = OptionParser()
    parser.set_defaults(engineport=controllerConfig.listenForEnginesOn[1])
    parser.set_defaults(engineip=controllerConfig.listenForEnginesOn[0])
    
    parser.add_option("--engine-port", type="int", dest="engineport",
        help="the TCP port the controller will listen on for engine connections")
    parser.add_option("--engine-ip", type="string", dest="engineip",
        help="the TCP ip address the controller will listen on for engine connections")
        
    # Configuration files and profiles
    parser.add_option("-p", "--profile", type="string", dest="profile",
        help="the name of a profile")
    parser.add_option("--rcfile", type="string", dest="rcfile",
        help="the name of a configuration file")
    parser.add_option("--ipythondir", type="string", dest="ipythondir",
        help="look for config files and profiles in this directory")
    (options, args) = parser.parse_args()
          
    # Configuration files and profiles
    if options.profile and not options.rcfile:
        config.updateConfigWithProfile('ipcontroller', options.profile, options.ipythondir)
    elif options.rcfile and not options.profile:
        config.updateConfigWithFile(options.rcfile, options.ipythondir)
    else:
        config.updateConfigWithFile('ipcontrollerrc.py', options.ipythondir)
        
    # Update withh command line options
    controllerConfig.listenForEnginesOn = (options.engineip, options.engineport)
    main()
    
    
if __name__ == "__main__":
    start()
