#!/usr/bin/env python
"""The ipython controller.
"""

#*****************************************************************************
#       Copyright (C) 2005  Fernando Perez <fperez@colorado.edu>
#                           Brian E Granger <ellisonbg@gmail.com>
#                           Benjamin Ragan-Kelly <<benjaminrk@gmail.com>>
#
#  Distributed under the terms of the BSD License.  The full license is in
#  the file COPYING, distributed as part of this software.
#*****************************************************************************

import sys, time
from optparse import OptionParser

from twisted.internet import reactor, error
from twisted.python import log

from ipython1.kernel import controllerservice
from ipython1.config.objects import ControllerConfiguration
from ipython1.config.loader import configure

controllerConfig = ControllerConfiguration()
configure(controllerConfig)

def main():
    log.startLogging(sys.stdout)
    
    cs = controllerservice.ControllerService()
    efac = controllerConfig.engineServerProtocolInterface(cs)
    efac.MAX_LENGTH = controllerConfig.maxMessageSize
    reactor.listenTCP(
        port=controllerConfig.listenForEnginesOn[1],
        factory=efac,
        interface=controllerConfig.listenForEnginesOn[0])
    for ci in controllerConfig.clientInterfaces:
        fac = ci[0](cs)
        fac.MAX_LENGTH = controllerConfig.maxMessageSize
        reactor.listenTCP(
            port=ci[1][1],
            factory=fac,
            interface=ci[1][0])
    cs.startService()
    reactor.run()

def start():
    parser = OptionParser()
    parser.set_defaults(eport=controllerConfig.listenForEnginesOn[1])
    parser.set_defaults(eip=controllerConfig.listenForEnginesOn[0])
    parser.set_defaults(configfile = '')
    parser.add_option("-p", "--engineport", type="int", dest="eport",
        help="the TCP port the controller will listen on for engine connections")
    parser.add_option("-i", "--engineip", type="string", dest="eip",
        help="the TCP ip address the controller will listen on for engine connections")
    parser.add_option("-f", "--configfile", type="string", dest="configfile",
        help="an additional Config File")
    (options, args) = parser.parse_args()
    if options.configfile:
        controllerConfig.addConfigFile(options.configfile)
        configure(controllerConfig)
    controllerConfig.update(listenForEnginesOn = (options.eip, options.eport))
    main()
    
    
if __name__ == "__main__":
    start()
