#!/usr/bin/env python
"""The IPython Kernel Engine using perspective broker.

To connect the engine to a controller at 127.0.0.1:9999:

ipenginepb -p 9999 -c '127.0.0.1'
"""

#*****************************************************************************
#       Copyright (C) 2005  Fernando Perez <fperez@colorado.edu>
#                           Brian E Granger <ellisonbg@gmail.com>
#                           Benjamin Ragan-Kelly <<benjaminrk@gmail.com>>
#
#  Distributed under the terms of the BSD License.  The full license is in
#  the file COPYING, distributed as part of this software.
#*****************************************************************************

import sys
from optparse import OptionParser

from twisted.internet import reactor, error
from twisted.python import log

from ipython1.kernel.engineservice import EngineService
from ipython1.config.objects import EngineConfiguration
from ipython1.config.loader import configure

engineConfig = EngineConfiguration()
configure(engineConfig)

# MPI module should be loaded first

mpi = None
if engineConfig.mpiImportStatement:
    try:
        exec engineConfig.mpiImportStatement
    except ImportError:
        mpi = None

def main(n):
    log.startLogging(sys.stdout)
    for i in range(n):
        service = EngineService(engineConfig.engineShell, mpi=mpi)
        reactor.connectTCP(
            engineConfig.connectToControllerOn[0],
            engineConfig.connectToControllerOn[1],
            engineConfig.engineClientProtocolInterface(service))      
        service.startService()
    reactor.run()

def start(n=1):
    parser = OptionParser()
    parser.set_defaults(port=engineConfig.connectToControllerOn[1])
    parser.set_defaults(controller=engineConfig.connectToControllerOn[0])
    parser.set_defaults(n=n)
    parser.set_defaults(configfile = '')
    parser.add_option("-p", "--port", type="int", dest="port",
        help="the TCP port the controller listens on")
    parser.add_option("-i", "--controller", type="string", dest="controller",
        help="the address of the controller")
    parser.add_option("-n", "--num", type="int", dest="n",
        help="the number of engines to start")
    parser.add_option("-f", "--configfile", type="string", dest="configfile",
        help="an additional Config File")
    (options, args) = parser.parse_args()
    if options.configfile:
        engineConfig.addConfigFile(options.configfile)
        configure(engineConfig)
    engineConfig.update(connectToControllerOn = (options.controller, options.port))
    main(options.n)
    
if __name__ == "__main__":
    start()
