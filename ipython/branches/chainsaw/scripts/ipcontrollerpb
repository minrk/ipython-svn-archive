#!/usr/bin/env python
"""The basic ipython controller perspective broker kernel.

This module is meant to be run from the command line.  To start the controller,
issue the command:

    python ipenginepb

This will start the kernel listening on port 10105 for control and 10201 for
engine connections (the default).  Here is an example that starts
the kernel on port 10106 for control, and 10202 for engines:

    python ipenginepb -c 10106 -e 10202

For more information on the command line options, run:

    python ipenginepb -h

NOTE:  The kernel cannot currently be run in the background, so:

    python ipenginepb &

won't result in a running kernel instance.
"""

#*****************************************************************************
#       Copyright (C) 2005  Fernando Perez <fperez@colorado.edu>
#                           Brian E Granger <ellisonbg@gmail.com>
#                           Benjamin Ragan-Kelly <<benjaminrk@gmail.com>>
#
#  Distributed under the terms of the BSD License.  The full license is in
#  the file COPYING, distributed as part of this software.
#*****************************************************************************

import sys, time
#time.sleep(10)
from optparse import OptionParser

from twisted.internet import reactor, error
from twisted.spread import pb
from twisted.python import log

from ipython1.kernel import controllerservice, enginepb, controllervanilla, controllerpb
#from ipython1.kernel import serialized


def tryPorts(port, factory):
    try:
        d = reactor.listenTCP(port, factory)
    except error.CannotListenError:
        log.msg("Trying the next port")
        d = tryPorts(port+1, factory)
    return d

def main(cport, eport, pport):
    log.startLogging(sys.stdout)
    
    cs = controllerservice.ControllerService()
    efac = pb.PBServerFactory(enginepb.IPBRemoteEngineRoot(cs))
#    cs.registerSerializationTypes(serialized.PickleSerialized)
    cfac = controllervanilla.IVanillaControllerFactory(cs)
    pfac = pb.PBServerFactory(controllerpb.IPBController(cs))
    reactor.callLater(1.0,tryPorts, eport, efac)
    reactor.callLater(2.0,tryPorts, cport, cfac)
    reactor.callLater(3.0,tryPorts, pport, pfac)
    cs.startService()
    reactor.run()

def start():
    parser = OptionParser()
    parser.set_defaults(cport=10105)
    parser.set_defaults(eport=10201)
    parser.set_defaults(pport=10111)
    parser.add_option("-c", "--controlport", type="int", dest="cport",
        help="the TCP port the controller will listen on for control commands")
    parser.add_option("-e", "--engineport", type="int", dest="eport",
        help="the TCP port the controller will listen on for engine connections")
    parser.add_option("-p", "--pbcontrolport", type="int", dest="pport",
        help="the TCP port the controller will listen on for perspective broker control connections")
    (options, args) = parser.parse_args()
    print "Starting the controller on ports Engine:%i , Control: %i , ControlPB: %i" % (
                options.eport, options.cport, options.pport)
    main(options.cport, options.eport, options.pport)
    
if __name__ == "__main__":
    start()
