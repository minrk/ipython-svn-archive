<ip:notebook xmlns:ip="http://ipython.scipy.org/notebook-xml" xmlns:db="http://docbook.org/ns/docbook" version="1.1"><ip:head/><ip:log id="default-log"/><ip:sheet id="chapter10">
<db:title>Linear Algebra</db:title>
<db:para>When SciPy is built using the optimized ATLAS LAPACK and BLAS libraries,
it has very fast linear algebra capabilities. If you dig deep enough, all of the
raw lapack and blas libraries are available for your use for even more speed. In
this section, some easier-to-use interfaces to these routines are described.
</db:para>
<db:para>
All of these linear algebra routines expect an object that can be converted into
a 2-dimensional array. The output of these routines is also a two-dimensional
array. There is a matrix class defined in Numeric that scipy inherits and
extends. You can initialize this class with an appropriate Numeric array in
order to get objects for which multiplication is matrix-multiplication instead
of the default, element-by-element multiplication. 
</db:para>

<db:section>
<db:title>Matrix Class</db:title>
<db:para>The matrix class is initialized with the SciPy command mat which is
just convenient short-hand for Matrix.Matrix. If you are going to be doing a lot
of matrix-math, it is convenient to convert arrays into matrices using this
command. One convenience of using the mat command is that you can enter
two-dimensional matrices using MATLAB-like syntax with commas or spaces
separating columns and semicolons separqting rows as long as the matrix is placed
in a string passed to mat. 
</db:para>
</db:section>

<db:section>
<db:title>Basic routines</db:title>
<db:section>
<db:title>Finding Inverse</db:title>
<db:para>The inverse of a matrix <ip:inlineequation>\mathbf{A}</ip:inlineequation> is the matrix <ip:inlineequation>\mathbf{B}</ip:inlineequation> such that
<ip:inlineequation>\mathbf{AB}=\mathbf{I}</ip:inlineequation> where <ip:inlineequation>\mathbf{I}</ip:inlineequation> is the identity matrix consisting of
ones down the main diagonal. Usually <ip:inlineequation>\mathbf{B}</ip:inlineequation> is denoted
<ip:inlineequation>\mathbf{B}=\mathbf{A}^{-1}</ip:inlineequation>. In SciPy, the matrix inverse of the Numeric array,
A, is obtained using <db:code>linalg.inv(A)</db:code>, or using <db:code>A.I</db:code> if A is a Matrix. For example,
let 
<ip:equation>\mathbf{A=}\left[\begin{array}{ccc}
1 &amp; 3 &amp; 5\\
2 &amp; 5 &amp; 1\\
2 &amp; 3 &amp; 8\end{array}\right]
</ip:equation>
then <ip:equation>\mathbf{A^{-1}=\frac{1}{25}\left[\begin{array}{ccc}
-37 &amp; 9 &amp; 22\\
14 &amp; 2 &amp; -9\\
4 &amp; -3 &amp; 1\end{array}\right]=\left[\begin{array}{ccc}
-1.48 &amp; 0.36 &amp; 0.88\\
0.56 &amp; 0.08 &amp; -0.36\\
0.16 &amp; -0.12 &amp; 0.04\end{array}\right].}
</ip:equation>
 The following example demonstrates this computation in SciPy
</db:para>
<db:programlisting> XXX: ipython
&gt;&gt;&gt; A = mat('[1 3 5; 2 5 1; 2 3 8]')
&gt;&gt;&gt; A
Matrix([[1, 3, 5],
       [2, 5, 1],
       [2, 3, 8]])
&gt;&gt;&gt; A.I
Matrix([[-1.48,  0.36,  0.88],
       [ 0.56,  0.08, -0.36],
       [ 0.16, -0.12,  0.04]])
&gt;&gt;&gt; linalg.inv(A)
array([[-1.48,  0.36,  0.88],
       [ 0.56,  0.08, -0.36],
       [ 0.16, -0.12,  0.04]])
</db:programlisting>
</db:section>

<db:section>
<db:title>Solving linear system</db:title>
<db:para>Solving linear systems of equations is straightforward using the scipy
command linalg.solve. This command expects an input matrix and a right-hand-side
vector. The solution vector is then computed. An option for entering a symmetrix
matrix is offered which can speed up the processing when applicable. As an
example, suppose it is desired to solve the following simultaneous equations:
<ip:equation verb="1">
   \begin{eqnarray*}
   x+3y+5z &amp; = &amp; 10\\
   2x+5y+z &amp; = &amp; 8\\
   2x+3y+8z &amp; = &amp; 3\end{eqnarray*}
</ip:equation>
 We could find the solution vector using a matrix inverse:
<ip:equation>
\left[\begin{array}{c}
x\\
y\\
z\end{array}\right]=\left[\begin{array}{ccc}
1 &amp; 3 &amp; 5\\
2 &amp; 5 &amp; 1\\
2 &amp; 3 &amp; 8\end{array}\right]^{-1}\left[\begin{array}{c}
10\\
8\\
3\end{array}\right]=\frac{1}{25}\left[\begin{array}{c}
-232\\
129\\
19\end{array}\right]=\left[\begin{array}{c}
-9.28\\
5.16\\
0.76\end{array}\right].
</ip:equation>
However, it is better to use the linalg.solve command
which can be faster and more numerically stable. In this case it gives the same
answer as shown in the following example: 
</db:para>
<db:programlisting>XXX: ipython
&gt;&gt;&gt; A = mat('[1 3 5; 2 5 1; 2 3 8]')
&gt;&gt;&gt; b = mat('[10;8;3]')
&gt;&gt;&gt; A.I*b
Matrix([[-9.28],
       [ 5.16],
       [ 0.76]])
&gt;&gt;&gt; linalg.solve(A,b)
array([[-9.28],
       [ 5.16],
       [ 0.76]])
</db:programlisting>
</db:section>

<db:section>
<db:title>Finding Determinant</db:title>
<db:para>The determinant of a square matrix
<ip:inlineequation>\mathbf{A}</ip:inlineequation> is often denoted
<ip:inlineequation>\left|\mathbf{A}\right|</ip:inlineequation> and is a quantity often used in linear algebra. Suppose
<ip:inlineequation>a_{ij}</ip:inlineequation> are the elements of the matrix <ip:inlineequation>\mathbf{A}</ip:inlineequation> and let
<ip:inlineequation>M_{ij}=\left|\mathbf{A}_{ij}\right|</ip:inlineequation> be the determinant of the matrix left by
removing the <ip:inlineequation>i^{\textrm{th}}</ip:inlineequation> row and <ip:inlineequation>j^{\textrm{th}}column</ip:inlineequation> from <ip:inlineequation>\mathbf{A}</ip:inlineequation>. Then
for any row <ip:equation>i,\left|\mathbf{A}\right|=\sum_{j}\left(-1\right)^{i+j}a_{ij}M_{ij}</ip:equation>.
This is a recursive way to define the determinant where the base case is defined
by accepting that the determinant of a 1\times1 matrix is the only matrix
element. In SciPy the determinant can be calculated with linalg.det. For
example, the determinant of 
<ip:equation>\mathbf{A=}\left[\begin{array}{ccc}
1 &amp; 3 &amp; 5\\
2 &amp; 5 &amp; 1\\
2 &amp; 3 &amp; 8\end{array}\right]</ip:equation> is 
<ip:equation verb="1">\begin{eqnarray*}
\left|\mathbf{A}\right| &amp; = &amp; 1\left|\begin{array}{cc}
5 &amp; 1\\
3 &amp; 8\end{array}\right|-3\left|\begin{array}{cc}
2 &amp; 1\\
2 &amp; 8\end{array}\right|+5\left|\begin{array}{cc}
2 &amp; 5\\
2 &amp; 3\end{array}\right|\\
 &amp; = &amp; 1\left(5\cdot8-3\cdot1\right)-3\left(2\cdot8-2\cdot1\right)+5\left(2\cdot3-2\cdot5\right)=-25
.\end{eqnarray*}
</ip:equation> In SciPy this is
computed as shown in this example:
</db:para>
<db:programlisting> XXX: ipython
&gt;&gt;&gt; A = mat('[1 3 5; 2 5 1; 2 3 8]')
&gt;&gt;&gt; linalg.det(A)
-25.000000000000004
</db:programlisting>
</db:section>

<db:section>
<db:title>Computing norms</db:title>
<db:para>Matrix and vector norms can also be computed with SciPy. A wide
range of norm definitions are available using different parameters to the order
argument of linalg.norm. This function takes a rank-1 (vectors) or a rank-2
(matrices) array and an optional order argument (default is 2). Based on these
inputs a vector or matrix norm of the requested order is computed. 
</db:para>
<db:para>
For vector x, the order parameter can be any real number including inf or -inf. The computed norm is 
<ip:equation>\left\Vert \mathbf{x}\right\Vert =\left\{ \begin{array}{cc}
\max\left|x_{i}\right| &amp; \textrm{ord}=\textrm{inf}\\
\min\left|x_{i}\right| &amp; \textrm{ord}=-\textrm{inf}\\
\left(\sum_{i}\left|x_{i}\right|^{\textrm{ord}}\right)^{1/\textrm{ord}} &amp;
\left|\textrm{ord}\right|&lt;\infty.\end{array}\right.</ip:equation> 
</db:para>
<db:para>
For matrix <ip:inlineequation>\mathbf{A}</ip:inlineequation> the only valid values for norm are <ip:inlineequation>\pm2</ip:inlineequation>,<ip:inlineequation>\pm1</ip:inlineequation>, <ip:inlineequation>\pm inf</ip:inlineequation>, and
'fro' (or 'f'). Thus, <ip:equation>\left\Vert \mathbf{A}\right\Vert =\left\{ \begin{array}{cc}
\max_{i}\sum_{j}\left|a_{ij}\right| &amp; \textrm{ord}=\textrm{inf}\\
\min_{i}\sum_{j}\left|a_{ij}\right| &amp; \textrm{ord}=-\textrm{inf}\\
\max_{j}\sum_{i}\left|a_{ij}\right| &amp; \textrm{ord}=1\\
\min_{j}\sum_{i}\left|a_{ij}\right| &amp; \textrm{ord}=-1\\
\max\sigma_{i} &amp; \textrm{ord}=2\\
\min\sigma_{i} &amp; \textrm{ord}=-2\\
\sqrt{\textrm{trace}\left(\mathbf{A}^{H}\mathbf{A}\right)} &amp;
\textrm{ord}=\textrm{'fro'}\end{array}\right.</ip:equation> where <ip:inlineequation>\sigma_{i}</ip:inlineequation> are the singular
values of <ip:inlineequation>\mathbf{A}</ip:inlineequation>. 
</db:para>
</db:section>

<db:section>
<db:title>Solving linear least-squares problems and pseudo-inverses</db:title>
<db:para>Linear least-squares problems occur in many branches of applied
mathematics. In this problem a set of linear scaling coefficients is sought that
allow a model to fit data. In particular it is assumed that data <ip:inlineequation>y_{i}</ip:inlineequation> is
related to data <ip:inlineequation>\mathbf{x}_{i}</ip:inlineequation> through a set of coefficients <ip:inlineequation>c_{j}</ip:inlineequation> and model
functions <ip:inlineequation>f_{j}\left(\mathbf{x}_{i}\right)</ip:inlineequation> via the model
<ip:equation>y_{i}=\sum_{j}c_{j}f_{j}\left(\mathbf{x}_{i}\right)+\epsilon_{i}</ip:equation> where
<ip:inlineequation>\epsilon_{i}</ip:inlineequation> represents uncertainty in the data. The strategy of least squares
is to pick the coefficients <ip:inlineequation>c_{j}</ip:inlineequation> to minimize
<ip:equation>
J\left(\mathbf{c}\right)=\sum_{i}\left|y_{i}-\sum_{j}c_{j}f_{j}\left(x_{i}\right)\right|^{2}.
</ip:equation></db:para>
<db:para>Theoretically, a global minimum will occur when 
<ip:equation>\frac{\partial J}{\partial
c_{n}^{*}}=0=\sum_{i}\left(y_{i}-\sum_{j}c_{j}f_{j}\left(x_{i}\right)\right)\left(-f_{n}^{*}\left(x_{i}\right)\right)</ip:equation> or
<ip:equation verb="1">\begin{eqnarray*}
\sum_{j}c_{j}\sum_{i}f_{j}\left(x_{i}\right)f_{n}^{*}\left(x_{i}\right) &amp; = &amp; \sum_{i}y_{i}f_{n}^{*}
\left(x_{i}\right)\\
\mathbf{A}^{H}\mathbf{Ac} &amp; = &amp; \mathbf{A}^{H}\mathbf{y}\end{eqnarray*}
</ip:equation> where
<ip:equation>\left\{ \mathbf{A}\right\} _{ij}=f_{j}\left(x_{i}\right)</ip:equation>. When <ip:inlineequation>\mathbf{A^{H}A}</ip:inlineequation> 
is invertible, then
<ip:equation>\mathbf{c}=\left(\mathbf{A}^{H}\mathbf{A}\right)^{-1}\mathbf{A}^{H}\mathbf{y}=\mathbf{A}^{\dagger}\mathbf{y}</ip:equation> 
where <ip:inlineequation>\mathbf{A}^{\dagger}</ip:inlineequation> is called the pseudo-inverse of <ip:inlineequation>\mathbf{A}</ip:inlineequation>. Notice
that using this definition of <ip:inlineequation>\mathbf{A}</ip:inlineequation> the model can be written
<ip:equation>\mathbf{y}=\mathbf{Ac}+\boldsymbol{\epsilon}.</ip:equation> The command linalg.lstsq will solve
the linear least squares problem for <ip:inlineequation>\mathbf{c}</ip:inlineequation> given <ip:inlineequation>\mathbf{A}</ip:inlineequation> and <ip:inlineequation>\mathbf{y}</ip:inlineequation>.
In addition linalg.pinv or linalg.pinv2 (uses a different method based on
singular value decomposition) will find <ip:inlineequation>\mathbf{A}^{\dagger}</ip:inlineequation> given <ip:inlineequation>\mathbf{A}</ip:inlineequation>. 
</db:para>
<db:para>The following example and figure demonstrate the use of linalg.lstsq and
linalg.pinv for solving a data-fitting problem. The data shown below were
generated using the model: <ip:equation>y_{i}=c_{1}e^{-x_{i}}+c_{2}x_{i}</ip:equation> where <ip:inlineequation>x_{i}=0.1i</ip:inlineequation> for
<ip:inlineequation>i=1\ldots10</ip:inlineequation>, <ip:inlineequation>c_{1}=5</ip:inlineequation>, and <ip:inlineequation>c_{2}=4</ip:inlineequation>. Noise is added to <ip:inlineequation>y_{i}</ip:inlineequation> and the coefficients
<ip:inlineequation>c_{1}</ip:inlineequation> and <ip:inlineequation>c_{2}</ip:inlineequation> are estimated using linear least squares. 
</db:para>
<db:programlisting> XXX: ipython
c1,c2= 5.0,2.0
i = r_[1:11]
xi = 0.1*i
yi = c1*exp(-xi)+c2*xi
zi = yi + 0.05*max(yi)*randn(len(yi))

A = c_[exp(-xi)[:,NewAxis],xi[:,NewAxis]]
c,resid,rank,sigma = linalg.lstsq(A,zi)

xi2 = r_[0.1:1.0:100j]
yi2 = c[0]*exp(-xi2) + c[1]*xi2

xplt.plot(xi,zi,'x',xi2,yi2)
xplt.limits(0,1.1,3.0,5.5)
xplt.xlabel('x_i')
xplt.title('Data fitting with linalg.lstsq')
xplt.eps('lstsq_fit')
</db:programlisting>
<db:para>
[Graphics file: lstsq_fit.eps]
</db:para>
</db:section>

<db:section>
<db:title>Generalized inverse</db:title>
<db:para>The generalized inverse is calculated using the command linalg.pinv
or linalg.pinv2. These two commands differ in how they compute the generalized
inverse. The first uses the linalg.lstsq algorithm while the second uses
singular value decomposition. Let <ip:inlineequation>\mathbf{A}</ip:inlineequation> be an <ip:inlineequation>M\times N</ip:inlineequation> matrix, then if <ip:inlineequation>M&gt;N</ip:inlineequation> 
the generalized inverse is
<ip:equation>\mathbf{A}^{\dagger}=\left(\mathbf{A}^{H}\mathbf{A}\right)^{-1}\mathbf{A}^{H}</ip:equation> 
while if <ip:inlineequation>M&lt;N</ip:inlineequation> matrix the generalized inverse is
<ip:equation>\mathbf{A}^{\#}=\mathbf{A}^{H}\left(\mathbf{A}\mathbf{A}^{H}\right)^{-1}.</ip:equation> In
both cases for <ip:inlineequation>M=N</ip:inlineequation>, then <ip:equation>\mathbf{A}^{\dagger}=\mathbf{A}^{\#}=\mathbf{A}^{-1}</ip:equation> as
long as <ip:inlineequation>\mathbf{A}</ip:inlineequation> is invertible. 
</db:para>
</db:section>
</db:section>

<db:section>
<db:title>Decompositions</db:title>
<db:para>In many applications it is useful to decompose a matrix using other
representations. There are several decompositions supported by SciPy. 
</db:para>

<db:section>
<db:title>Eigenvalues and eigenvectors</db:title>
<db:para>The eigenvalue-eigenvector problem is one of the most commonly
employed linear algebra operations. In one popular form, the
eigenvalue-eigenvector problem is to find for some square matrix <ip:inlineequation>\mathbf{A}</ip:inlineequation> 
scalars <ip:inlineequation>\lambda</ip:inlineequation>  and corresponding vectors <ip:inlineequation>\mathbf{v}</ip:inlineequation> such that
<ip:equation>\mathbf{Av}=\lambda\mathbf{v}.</ip:equation> For an <ip:inlineequation>N\times N</ip:inlineequation> matrix, there are N (not
necessarily distinct) eigenvalues --- roots of the (characteristic) polynomial
<ip:equation>\left|\mathbf{A}-\lambda\mathbf{I}\right|=0.</ip:equation> 
</db:para>
<db:para>The eigenvectors, <ip:inlineequation>\mathbf{v}</ip:inlineequation>, are also sometimes called right eigenvectors to
distinguish them from another set of left eigenvectors that satisfy
<ip:equation>\mathbf{v}_{L}^{H}\mathbf{A}=\lambda\mathbf{v}_{L}^{H}</ip:equation> or
<ip:equation>\mathbf{A}^{H}\mathbf{v}_{L}=\lambda^{*}\mathbf{v}_{L}.</ip:equation> With it's default
optional arguments, the command linalg.eig returns <ip:inlineequation>\lambda</ip:inlineequation>  and <ip:inlineequation>\mathbf{v}</ip:inlineequation>.
However, it can also return <ip:inlineequation>\mathbf{v}_{L}</ip:inlineequation> and just <ip:inlineequation>\lambda</ip:inlineequation>  by itself
(linalg.eigvals returns just <ip:inlineequation>\lambda</ip:inlineequation>  as well). 
</db:para>
<db:para>In addtion, linalg.eig can also solve the more general eigenvalue problem
<ip:equation verb="1">\begin{eqnarray*}
\mathbf{Av} &amp; = &amp; \lambda\mathbf{Bv}\\
\mathbf{A}^{H}\mathbf{v}_{L} &amp; = &amp; \lambda^{*}\mathbf{B}^{H}\mathbf{v}_{L}\end{eqnarray*}</ip:equation>
for square matrices <ip:inlineequation>\mathbf{A}</ip:inlineequation> and <ip:inlineequation>\mathbf{B}</ip:inlineequation>. The standard
eigenvalue problem is an example of the general eigenvalue problem for
<ip:inlineequation>\mathbf{B}=\mathbf{I}</ip:inlineequation>. When a generalized eigenvalue problem can be solved, then
it provides a decomposition of <ip:inlineequation>\mathbf{A}</ip:inlineequation> as
<ip:equation>\mathbf{A}=\mathbf{BV}\boldsymbol{\Lambda}\mathbf{V}^{-1}</ip:equation> where <ip:inlineequation>\mathbf{V}</ip:inlineequation> is
the collection of eigenvectors into columns and <ip:inlineequation>\boldsymbol{\Lambda}</ip:inlineequation> is a
diagonal matrix of eigenvalues. 
</db:para>
<db:para>By definition, eigenvectors are only defined up to a constant scale factor. In
SciPy, the scaling factor for the eigenvectors is chosen so that <ip:inlineequation>\left\Vert
\mathbf{v}\right\Vert ^{2}=\sum_{i}v_{i}^{2}=1</ip:inlineequation>. 
</db:para>
<db:para>As an example, consider finding the eigenvalues and eigenvectors of the matrix
<ip:equation>\mathbf{A}=\left[\begin{array}{ccc}
1 &amp; 5 &amp; 2\\
2 &amp; 4 &amp; 1\\
3 &amp; 6 &amp; 2\end{array}\right].</ip:equation> The characteristic polynomial is
<ip:equation verb="1">
\begin{eqnarray*}
\left|\mathbf{A}-\lambda\mathbf{I}\right| &amp; = &amp; \left(1-\lambda\right)\left[\left(4-\lambda\right)\left(2-\lambda\right)-6\right]-\\
 &amp;  &amp; 5\left[2\left(2-\lambda\right)-3\right]+2\left[12-3\left(4-\lambda\right)\right]\\
 &amp; = &amp; -\lambda^{3}+7\lambda^{2}+8\lambda-3.\end{eqnarray*}
</ip:equation>
 The roots of this polynomial are the
eigenvalues of <ip:inlineequation>\mathbf{A}</ip:inlineequation>: 
<ip:equation verb="1">
\begin{eqnarray*}
\lambda_{1} &amp; = &amp; 7.9579\\
\lambda_{2} &amp; = &amp; -1.2577\\
\lambda_{3} &amp; = &amp; 0.2997.\end{eqnarray*}
</ip:equation>
 The eigenvectors corresponding to each
eigenvalue can be found using the original equation. The eigenvectors associated
with these eigenvalues can then be found. 
</db:para>
<db:programlisting>XXX: ipython
&gt;&gt;&gt; A = mat('[1 5 2; 2 4 1; 3 6 2]')
&gt;&gt;&gt; la,v = linalg.eig(A)
&gt;&gt;&gt; l1,l2,l3 = la
&gt;&gt;&gt; print l1, l2, l3
(7.95791620491+0j) (-1.25766470568+0j) (0.299748500767+0j)

&gt;&gt;&gt; print v[:,0]
array([-0.5297, -0.4494, -0.7193])
&gt;&gt;&gt; print v[:,1]
[-0.9073  0.2866  0.3076]
&gt;&gt;&gt; print v[:,2]
[ 0.2838 -0.3901  0.8759]
&gt;&gt;&gt; print sum(abs(v**2),axis=0)
[ 1.  1.  1.]

&gt;&gt;&gt; v1 = mat(v[:,0]).T
&gt;&gt;&gt; print max(ravel(abs(A*v1-l1*v1)))
4.4408920985e-16
</db:programlisting>
</db:section>

<db:section>
<db:title>Singular value decomposition</db:title>
<db:para>Singular Value Decompostion (SVD) can be thought of as an extension of the
eigenvalue problem to matrices that are not square. Let <ip:inlineequation>\mathbf{A}</ip:inlineequation> be an 
<ip:inlineequation>M\times N</ip:inlineequation> matrix with <ip:inlineequation>M</ip:inlineequation> and <ip:inlineequation>N</ip:inlineequation> arbitrary. The matrices <ip:inlineequation>\mathbf{A}^{H}\mathbf{A}</ip:inlineequation> and
<ip:inlineequation>\mathbf{A}\mathbf{A}^{H}</ip:inlineequation> are square hermitian matrices<db:footnote><db:para>A hermition matrix
<ip:inlineequation>\mathbf{D}</ip:inlineequation> satisfies <ip:inlineequation>\mathbf{D}^{H}=\mathbf{D}</ip:inlineequation>.</db:para></db:footnote> of size <ip:inlineequation>N\times N</ip:inlineequation> and <ip:inlineequation>M\times M</ip:inlineequation> 
respectively. It is known that the eigenvalues of square hermitian matrices are
real and non-negative. In addtion, there are at most <ip:inlineequation>\min\left(M,N\right)</ip:inlineequation> 
identical non-zero eigenvalues of <ip:inlineequation>\mathbf{A}^{H}\mathbf{A}</ip:inlineequation> and
<ip:inlineequation>\mathbf{A}\mathbf{A}^{H}</ip:inlineequation>. Define these positive eigenvalues as <ip:inlineequation>\sigma_{i}^{2}</ip:inlineequation>.
The square-root of these are called singular values of <ip:inlineequation>\mathbf{A}</ip:inlineequation>. The
eigenvectors of <ip:inlineequation>\mathbf{A}^{H}\mathbf{A}</ip:inlineequation> are collected by columns into an
<ip:inlineequation>N\times N</ip:inlineequation> unitary<db:footnote><db:para>A unitary matrix <ip:inlineequation>\mathbf{D}</ip:inlineequation> satisfies
<ip:inlineequation>\mathbf{D}^{H}\mathbf{D}=\mathbf{I}=\mathbf{D}\mathbf{D}^{H}</ip:inlineequation> so that
<ip:inlineequation>\mathbf{D}^{-1}=\mathbf{D}^{H}</ip:inlineequation>.</db:para></db:footnote> matrix <ip:inlineequation>\mathbf{V}</ip:inlineequation> while the eigenvectors of
<ip:inlineequation>\mathbf{A}\mathbf{A}^{H}</ip:inlineequation> are collected by columns in the unitary matrix
<ip:inlineequation>\mathbf{U}</ip:inlineequation>, the singular values are collected in an <ip:inlineequation>M\times N</ip:inlineequation> zero matrix
<ip:inlineequation>\mathbf{\boldsymbol{\Sigma}}</ip:inlineequation> with main diagonal entries set to the singular
values. Then <ip:inlineequation>\mathbf{A=U}\boldsymbol{\Sigma}\mathbf{V}^{H}</ip:inlineequation> is the singular-value
decomposition of <ip:inlineequation>\mathbf{A}</ip:inlineequation>. Every matrix has a singular value decomposition.
Sometimes, the singular values are called the spectrum of <ip:inlineequation>\mathbf{A}</ip:inlineequation>. The
command linalg.svd will return <ip:inlineequation>\mathbf{U}</ip:inlineequation>, <ip:inlineequation>\mathbf{V}^{H}</ip:inlineequation>, and <ip:inlineequation>\sigma_{i}</ip:inlineequation> as an
array of the singular values. To obtain the matrix <ip:inlineequation>\mathbf{\Sigma}</ip:inlineequation> use
linalg.diagsvd. The following example illustrates the use of linalg.svd. 
</db:para>
<db:programlisting>XXX: ipython
&gt;&gt;&gt; A = mat('[1 3 2; 1 2 3]')
&gt;&gt;&gt; M,N = A.shape
&gt;&gt;&gt; U,s,Vh = linalg.svd(A)
&gt;&gt;&gt; Sig = mat(diagsvd(s,M,N))
&gt;&gt;&gt; U, Vh = mat(U), mat(Vh)
&gt;&gt;&gt; print U
Matrix([[-0.7071, -0.7071],
       [-0.7071,  0.7071]])
&gt;&gt;&gt; print Sig
Matrix([[ 5.1962,  0.    ,  0.    ],
       [ 0.    ,  1.    ,  0.    ]])
&gt;&gt;&gt; print Vh
Matrix([[-0.2722, -0.6804, -0.6804],
       [-0.    , -0.7071,  0.7071],
       [-0.9623,  0.1925,  0.1925]])

&gt;&gt;&gt; print A
Matrix([[1, 3, 2],
       [1, 2, 3]])
&gt;&gt;&gt; print U*Sig*Vh
Matrix([[ 1.,  3.,  2.],
       [ 1.,  2.,  3.]])
</db:programlisting>
</db:section>

<db:section>
<db:title>LU decomposition</db:title>
<db:para>The LU decompostion finds a representation for the <ip:inlineequation>M\times N</ip:inlineequation> matrix
<ip:inlineequation>\mathbf{A}</ip:inlineequation> as <ip:inlineequation>\mathbf{A}=\mathbf{PLU}</ip:inlineequation> where <ip:inlineequation>\mathbf{P}</ip:inlineequation> is an <ip:inlineequation>M\times M</ip:inlineequation> 
permutation matrix (a permutation of the rows of the identity matrix),
<ip:inlineequation>\mathbf{L}</ip:inlineequation> is in <ip:inlineequation>M\times K</ip:inlineequation> lower triangular or trapezoidal matrix
(<ip:inlineequation>K=\min\left(M,N\right)</ip:inlineequation>) with unit-diagonal, and <ip:inlineequation>\mathbf{U}</ip:inlineequation> is an upper
triangular or trapezoidal matrix. The SciPy command for this decomposition is
linalg.lu. 
</db:para>
<db:para>
Such a decomposition is often useful for solving many simultaneous equations
where the left-hand-side does not change but the right hand side does. For
example, suppose we are going to solve <ip:inlineequation>\mathbf{A}\mathbf{x}_{i}=\mathbf{b}_{i}</ip:inlineequation> 
for many different <ip:inlineequation>\mathbf{b}_{i}</ip:inlineequation>. The LU decomposition allows this to be
written as <ip:inlineequation>\mathbf{PLUx}_{i}=\mathbf{b}_{i}</ip:inlineequation>. Because <ip:inlineequation>\mathbf{L}</ip:inlineequation> is
lower-triangular, the equation can be solved for <ip:inlineequation>\mathbf{U}\mathbf{x}_{i}</ip:inlineequation> and
finally <ip:inlineequation>\mathbf{x}_{i}</ip:inlineequation> very rapidly using forward- and back-substitution. An
initial time spent factoring <ip:inlineequation>\mathbf{A}</ip:inlineequation> allows for very rapid solution of
similar systems of equations in the future. If the intent for performing LU
decomposition is for solving linear systems then the command linalg.lu_factor
should be used followed by repeated applications of the command linalg.lu_solve
to solve the system for each new right-hand-side. 
</db:para>
</db:section>

<db:section>
<db:title>Cholesky decomposition</db:title>
<db:para>Cholesky decomposition is a special case of LU decomposition
applicable to Hermitian positive definite matrices. When
<ip:inlineequation>\mathbf{A}=\mathbf{A}^{H}</ip:inlineequation> and <ip:inlineequation>\mathbf{x}^{H}\mathbf{Ax}\geq0</ip:inlineequation> for all <ip:inlineequation>\mathbf{x}</ip:inlineequation>,
then decompositions of <ip:inlineequation>\mathbf{A}</ip:inlineequation> can be found so that
<ip:equation verb="1">
\begin{eqnarray*}
\mathbf{A} &amp; = &amp; \mathbf{U}^{H}\mathbf{U}\\
\mathbf{A} &amp; = &amp; \mathbf{L}\mathbf{L}^{H}\end{eqnarray*}
</ip:equation>
where
<ip:inlineequation>\mathbf{L}</ip:inlineequation> is lower-triangular and <ip:inlineequation>\mathbf{U}</ip:inlineequation> is upper triangular. Notice that
<ip:inlineequation>\mathbf{L}=\mathbf{U}^{H}</ip:inlineequation>. The command linagl.cholesky computes the cholesky
factorization. For using cholesky factorization to solve systems of equations
there are also linalg.cho_factor and linalg.cho_solve routines that work
similarly to their LU decomposition counterparts. 
</db:para>
</db:section>

<db:section>
<db:title>QR decomposition</db:title>
<db:para>The QR decomposition (sometimes called a polar decomposition) works for
any <ip:inlineequation>M\times N</ip:inlineequation> array and finds an <ip:inlineequation>M\times M</ip:inlineequation> unitary matrix <ip:inlineequation>\mathbf{Q}</ip:inlineequation> and an
<ip:inlineequation>M\times N</ip:inlineequation> upper-trapezoidal matrix <ip:inlineequation>\mathbf{R}</ip:inlineequation> such that <ip:inlineequation>\mathbf{A=QR}</ip:inlineequation>. Notice
that if the SVD of <ip:inlineequation>\mathbf{A}</ip:inlineequation> is known then the QR decomposition can be found
<ip:equation>\mathbf{A}=\mathbf{U}\boldsymbol{\Sigma}\mathbf{V}^{H}=\mathbf{QR}</ip:equation> implies that
<ip:inlineequation>\mathbf{Q}=\mathbf{U}</ip:inlineequation> and <ip:inlineequation>\mathbf{R}=\boldsymbol{\Sigma}\mathbf{V}^{H}</ip:inlineequation>. Note,
however, that in SciPy independent algorithms are used to find QR and SVD
decompositions. The command for QR decomposition is linalg.qr. 
</db:para>
</db:section>

<db:section>
<db:title>Schur decomposition</db:title>
<db:para>For a square <ip:inlineequation>N\times N</ip:inlineequation> matrix, <ip:inlineequation>\mathbf{A}</ip:inlineequation>, the Schur decomposition finds
(not-necessarily unique) matrices <ip:inlineequation>\mathbf{T}</ip:inlineequation> and <ip:inlineequation>\mathbf{Z}</ip:inlineequation> such that
<ip:equation>\mathbf{A}=\mathbf{ZT}\mathbf{Z}^{H}</ip:equation> where <ip:inlineequation>\mathbf{Z}</ip:inlineequation> is a unitary matrix and
<ip:inlineequation>\mathbf{T}</ip:inlineequation> is either upper-triangular or quasi-upper triangular depending on
whether or not a real schur form or complex schur form is requested. For a real
schur form both <ip:inlineequation>\mathbf{T}</ip:inlineequation> and <ip:inlineequation>\mathbf{Z}</ip:inlineequation> are real-valued when <ip:inlineequation>\mathbf{A}</ip:inlineequation> is
real-valued. When <ip:inlineequation>\mathbf{A}</ip:inlineequation> is a real-valued matrix the real schur form is only
quasi-upper triangular because <ip:inlineequation>2\times2</ip:inlineequation> blocks extrude from the main diagonal
corresponding to any complex-valued eigenvalues. The command linalg.schur finds
the Schur decomposition while the command linalg.rsf2csf converts <ip:inlineequation>\mathbf{T}</ip:inlineequation> and
<ip:inlineequation>\mathbf{Z}</ip:inlineequation> from a real Schur form to a complex Schur form. The Schur form is
especially useful in calculating functions of matrices. 
</db:para>
<db:para>The following example illustrates the schur decomposition:
</db:para>
<db:programlisting>XXX: ipython
&gt;&gt;&gt; A = mat('[1 3 2; 1 4 5; 2 3 6]')
&gt;&gt;&gt; T,Z = linalg.schur(A)
&gt;&gt;&gt; T1,Z1 = linalg.schur(A,'complex')
&gt;&gt;&gt; T2,Z2 = linalg.rsf2csf(T,Z)
&gt;&gt;&gt; print T
Matrix([[ 9.9001,  1.7895, -0.655 ],
       [ 0.    ,  0.5499, -1.5775],
       [ 0.    ,  0.5126,  0.5499]])
&gt;&gt;&gt; print T2
Matrix([[ 9.9001+0.j    , -0.3244+1.5546j, -0.8862+0.569j ],
       [ 0.    +0.j    ,  0.5499+0.8993j,  1.0649-0.j    ],
       [ 0.    +0.j    ,  0.    +0.j    ,  0.5499-0.8993j]])
&gt;&gt;&gt; print abs(T1-T2) # different
[[ 0.      2.1184  0.1949]
 [ 0.      0.      1.2676]
 [ 0.      0.      0.    ]]
&gt;&gt;&gt; print abs(Z1-Z2) # different
[[ 0.0683  1.1175  0.1973]
 [ 0.1186  0.5644  0.247 ]
 [ 0.1262  0.7645  0.1916]]
&gt;&gt;&gt; T,Z,T1,Z1,T2,Z2 = map(mat,(T,Z,T1,Z1,T2,Z2))
&gt;&gt;&gt; print abs(A-Z*T*Z.H)
Matrix([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
&gt;&gt;&gt; print abs(A-Z1*T1*Z1.H)
Matrix([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
&gt;&gt;&gt; print abs(A-Z2*T2*Z2.H)
Matrix([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
</db:programlisting>
</db:section>
</db:section>

<db:section>
<db:title>Matrix Functions</db:title>
<db:para>Consider the function <ip:inlineequation>f\left(x\right)</ip:inlineequation> with Taylor series expansion
<ip:equation>f\left(x\right)=\sum_{k=0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}x^{k}.</ip:equation> 
A matrix function can be defined using this Taylor series for the square matrix
<ip:inlineequation>\mathbf{A}</ip:inlineequation> as
<ip:equation>f\left(\mathbf{A}\right)=\sum_{k=0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}\mathbf{A}^{k}.</ip:equation> 
While, this serves as a useful representation of a matrix function, it is rarely
the best way to calculate a matrix function. 
</db:para>

<db:section>
<db:title>Exponential and logarithm functions</db:title>
<db:para>The matrix exponential is one of the more common matrix functions. It can
be defined for square matrices as
<ip:equation>e^{\mathbf{A}}=\sum_{k=0}^{\infty}\frac{1}{k!}\mathbf{A}^{k}.</ip:equation> The command
linalg.expm3 uses this Taylor series definition to compute the matrix
exponential. Due to poor convergence properties it is not often used. 
</db:para>
<db:para>Another method to compute the matrix exponential is to find an eigenvalue
decomposition of <ip:inlineequation>\mathbf{A}</ip:inlineequation>:
<ip:equation>\mathbf{A}=\mathbf{V}\boldsymbol{\Lambda}\mathbf{V}^{-1}</ip:equation> and note that
<ip:equation>e^{\mathbf{A}}=\mathbf{V}e^{\boldsymbol{\Lambda}}\mathbf{V}^{-1}</ip:equation> where the
matrix exponential of the diagonal matrix <ip:inlineequation>\boldsymbol{\Lambda}</ip:inlineequation> is just the
exponential of its elements. This method is implemented in linalg.expm2. 
</db:para>
<db:para>The preferred method for implementing the matrix exponential is to use scaling
and a Pad&#233; approximation for <ip:inlineequation>e^{x}</ip:inlineequation>. This algorithm is implemented as
linalg.expm. 
</db:para>
<db:para>The inverse of the matrix exponential is the matrix logarithm defined as the
inverse of the matrix exponential.
<ip:equation>\mathbf{A}\equiv\exp\left(\log\left(\mathbf{A}\right)\right)</ip:equation>. The matrix
logarithm can be obtained with linalg.logm. 
</db:para>
</db:section>

<db:section>
<db:title>Trigonometric functions</db:title>
<db:para>The trigonometric functions <ip:inlineequation>\sin</ip:inlineequation>, <ip:inlineequation>\cos</ip:inlineequation>, and <ip:inlineequation>\tan</ip:inlineequation> are implemented
for matrices in linalg.sinm, linalg.cosm, and linalg.tanm respectively. The
matrix sin and cosine can be defined using Euler's identity as
<ip:equation verb="1">
\begin{eqnarray*}
\sin\left(\mathbf{A}\right) &amp; = &amp; \frac{e^{j\mathbf{A}}-e^{-j\mathbf{A}}}{2j}\\
\cos\left(\mathbf{A}\right) &amp; = &amp; \frac{e^{j\mathbf{A}}+e^{-j\mathbf{A}}}{2}.\end{eqnarray*}
</ip:equation>
The tangent is
<ip:equation>\tan\left(x\right)=\frac{\sin\left(x\right)}{\cos\left(x\right)}=\left[\cos\left(x\right)\right]^{-1}\sin\left(x\right)</ip:equation> and
so the matrix tangent is defined as
<ip:equation>\left[\cos\left(\mathbf{A}\right)\right]^{-1}\sin\left(\mathbf{A}\right).</ip:equation> 
</db:para>
</db:section>

<db:section>
<db:title>Hyperbolic trigonometric functions</db:title>
<db:para>The hyperbolic trigonometric functions <ip:inlineequation>\sinh </ip:inlineequation>, <ip:inlineequation>\cosh </ip:inlineequation>, and <ip:inlineequation>\tanh</ip:inlineequation> 
can also be defined for matrices using the familiar definitions:
<ip:equation verb="1">
\begin{eqnarray*}
\sinh\left(\mathbf{A}\right) &amp; = &amp; \frac{e^{\mathbf{A}}-e^{-\mathbf{A}}}{2}\\
\cosh\left(\mathbf{A}\right) &amp; = &amp; \frac{e^{\mathbf{A}}+e^{-\mathbf{A}}}{2}\\
\tanh\left(\mathbf{A}\right) &amp; = &amp; \left[\cosh\left(\mathbf{A}\right)\right]^{-1}\sinh\left(\mathbf{A}\right).\end{eqnarray*}
</ip:equation>
 These matrix functions can be found using
linalg.sinhm, linalg.coshm, and linalg.tanhm. 
</db:para>
</db:section>

<db:section>
<db:title>Arbitrary function</db:title>
<db:para>Finally, any arbitrary function that takes one complex number and returns
a complex number can be called as a matrix function using the command
linalg.funm. This command takes the matrix and an arbitrary Python function. It
then implements an algorithm from Golub and Van Loan's book "Matrix
Computations" to compute function applied to the matrix using a Schur
decomposition. Note that the function needs to accept complex numbers as input
in order to work with this algorithm. For example the following code computes
the zeroth-order Bessel function applied to a matrix.
</db:para>
<db:programlisting>XXX: ipython
&gt;&gt;&gt; A = rand(3,3)
&gt;&gt;&gt; B = linalg.funm(A,lambda x: special.jv(0,real(x)))
&gt;&gt;&gt; print A
[[ 0.0593  0.5612  0.4403]
 [ 0.8797  0.2556  0.1452]
 [ 0.964   0.9666  0.1243]]
&gt;&gt;&gt; print B
[[ 0.8206 -0.1212 -0.0612]
 [-0.1323  0.8256 -0.0627]
 [-0.2073 -0.1946  0.8516]]
</db:programlisting>
</db:section>
</db:section>

</ip:sheet></ip:notebook>