<notebook version="1"><head/><ipython-log id="default-log"><cell number="0"><input>  
############DO NOT EDIT THIS CELL############  
from pylab import *  
switch_backend('WXAgg')  
ion()  
</input></cell><cell number="1"><input>
import scipy; from scipy import *
</input></cell><cell number="2"><input>
help(integrate)
</input><stdout>
Help on package scipy.integrate in scipy:

NAME
    scipy.integrate

FILE
    /Library/Frameworks/Python.framework/Versions/2.4/lib/python2.4
/site-packages/scipy_complete-0.3.3_309.4626-py2.4-macosx-10.4-ppc.egg
/scipy/integrate/__init__.py

DESCRIPTION
    Integration routines
    ====================

     Methods for Integrating Functions given function object.

       quad          -- General purpose integration.
       dblquad       -- General purpose double integration.
       tplquad       -- General purpose triple integration.
       fixed_quad    -- Integrate func(x) using Gaussian quadrature of
order n.
       quadrature    -- Integrate with given tolerance using Gaussian
quadrature.
       romberg       -- Integrate func using Romberg integration.

     Methods for Integrating Functions given fixed samples.

       trapz         -- Use trapezoidal rule to compute integral from
samples.
       cumtrapz      -- Use trapezoidal rule to cumulatively compute
integral.
       simps         -- Use Simpson's rule to compute integral from
samples.
       romb          -- Use Romberg Integration to compute integral
from
                        (2**k + 1) evenly-spaced samples.

       See the special module's orthogonal polynomials (special) for
Gaussian
          quadrature roots and weights for other weighting factors and
regions.

     Interface to numerical integrators of ODE systems.

       odeint        -- General integration of ordinary differential
equations.
       ode           -- Integrate ODE using vode routine.

PACKAGE CONTENTS
    _odepack
    _quadpack
    common_routines
    info_integrate
    ode
    odepack
    quadpack
    quadrature
    setup_integrate
    vode

DATA
    Inf = inf
    inf = inf

</stdout></cell><cell number="3"><input>
result = integrate.quad(lambda x: special.jv(2.5,x), 0, 4.5)
</input></cell><cell number="4"><input>
print result
</input><stdout>
(1.1178179380783251, 7.8663172163807182e-09)
</stdout></cell><cell number="5"><input>
I = sqrt(2/pi)*(18.0/27*sqrt(2)*cos(4.5)-4.0/27*sqrt(2)*sin(4.5)+sqrt(2*pi)*
special.fresnel(3/sqrt(pi))[0])
</input></cell><cell number="6"><input>
print I

</input><stdout>
1.11781793809
</stdout></cell><cell number="7"><input>
print abs(result[0] - I)
</input><stdout>
1.03759223435e-11
</stdout></cell><cell number="8"><input>
from scipy.integrate import quad, Inf
</input></cell><cell number="9"><input>
def integrand(t, n, x):
    return exp(-x*t)/t**n
</input></cell><cell number="10"><input>
def expint(n, x):
    return quad(integrand, 1, Inf, args=(n,x))[0]
</input></cell><cell number="11"><input>
vec_expint = vectorize(expint)
</input></cell><cell number="12"><input>
vec_expint(3, arange(1.0, 4.0, 0.5))
</input><output>
[ 0.10969197, 0.05673949, 0.03013338, 0.01629537, 0.00893065,
0.00494538,]
</output></cell><cell number="13"><input>
special.expn(3, arange(1.0, 4.0, 0.5))
</input><output>
[ 0.10969197, 0.05673949, 0.03013338, 0.01629537, 0.00893065,
0.00494538,]
</output></cell><cell number="14"><input>
result = quad(lambda x: expint(3, x), 0, Inf)
</input></cell><cell number="15"><input>
print result
</input><stdout>
(0.33333333325010889, 2.8604070802797126e-09)
</stdout></cell><cell number="16"><input>
I3 = 1.0/3.0
</input></cell><cell number="17"><input>
print I3
</input><stdout>
0.333333333333
</stdout></cell><cell number="18"><input>
print I3 - result[0]
</input><stdout>
8.32244273496e-11
</stdout></cell><cell number="19"><input>
from scipy.integrate import dblquad
</input></cell><cell number="20"><input>
def I(n):
  return dblquad(lambda t,x: exp(-x*t)/t**n, 0, Inf, lambda x: 1, lambda x: Inf)
</input></cell><cell number="21"><input>
print I(4)
</input><stdout>
(0.25000000000435768, 1.0518246209542075e-09)
</stdout></cell><cell number="22"><input>
print I(3)
</input><stdout>
(0.33333333325010889, 2.8604070802797126e-09)
</stdout></cell><cell number="23"><input>
print I(2)
</input><stdout>
(0.49999999999857531, 1.8855523253868967e-09)
</stdout></cell><cell number="24"><input>
from scipy.integrate import odeint
</input></cell><cell number="25"><input>
from scipy.special import gamma, airy
</input></cell><cell number="26"><input>
y1_0 = 1.0/3**(2.0/3.0)/gamma(2.0/3.0)
</input></cell><cell number="27"><input>
y0_0 = -1.0/3**(1.0/3.0)/gamma(1.0/3.0)
</input></cell><cell number="28"><input>
y0 = [y0_0, y1_0]
</input></cell><cell number="29"><input>
def func(y, t):
  return [t*y[1], y[0]]
</input></cell><cell number="30"><input>
def gradient(y, t):
  return [[0,t], [1,0]]
  
  
</input></cell><cell number="31"><input>
x = arange(0, 4.0, 0.01)
</input></cell><cell number="32"><input>
t = x
</input></cell><cell number="33"><input>
ychk = airy(x)[0]
</input></cell><cell number="34"><input>
y = odeint(func, y0, t)
</input></cell><cell number="35"><input>
y2 = odeint(func, y0, t, Dfun=gradient)
</input></cell><cell number="36"><input>
import sys
</input></cell><cell number="37"><input>
sys.float_output_precision = 6
</input></cell><cell number="38"><input>
print ychk[:36:6]
</input><stdout>
[ 0.355028, 0.339511, 0.324068, 0.308763, 0.293658, 0.278806,]
</stdout></cell><cell number="39"><input>
print y[:36:6,1]
</input><stdout>
[ 0.355028, 0.339511, 0.324067, 0.308763, 0.293658, 0.278806,]
</stdout></cell><cell number="40"><input>
print y2[:36:6,1]
</input><stdout>
[ 0.355028, 0.339511, 0.324067, 0.308763, 0.293658, 0.278806,]
</stdout></cell></ipython-log><sheet id="chapter04">
<title>Integration (integrate)</title>
<para>The integrate sub-package provides several integration techniques including an ordinary differential equation integrator. An overview of the module is provided by the help command: </para><ipython-block logid="default-log"><ipython-cell type="input" number="1"/><ipython-cell type="input" number="2"/><ipython-cell type="stdout" number="2"/></ipython-block>
<section>
<title>General integration (integrate.quad)</title>
<para>The function quad is provided to integrate a function of one variable
between two points. The points can be 
<ipython-inlineequation>\pm\infty</ipython-inlineequation>
(<ipython-inlineequation>\pm</ipython-inlineequation> integrate.inf) to indicate
infinite limits. For example, suppose you wish to integrate a bessel function
<code>jv(2.5,x)</code> along the interval [0,4.5]. 
<ipython-equation>I=\int_{0}^{4.5}J_{2.5}\left(x\right)\,dx</ipython-equation>.
This could be computed using quad:
</para>
<ipython-block logid="default-log"><ipython-cell type="input" number="3"/><ipython-cell type="input" number="4"/><ipython-cell type="stdout" number="4"/><ipython-cell type="input" number="5"/><ipython-cell type="input" number="6"/><ipython-cell type="stdout" number="6"/><ipython-cell type="input" number="7"/><ipython-cell type="stdout" number="7"/></ipython-block>
<para>The first argument to quad is a "callable" Python object (i.e a function,
method, or class instance). Notice the use of a lambda-function in this case as
the argument. The next two arguments are the limits of integration. The return
value is a tuple, with the first element holding the estimated value of the
integral and the second element holding an upper bound on the error. Notice,
that in this case, the true value of this integral is
<ipython-equation>
I=\sqrt{\frac{2}{\pi}}\left(\frac{18}{27}\sqrt{2}\cos\left(4.5\right)-\frac{4}{27}\sqrt{2}\sin\left(4.5\right)+\sqrt{2\pi}\textrm{Si}\left(\frac{3}{\sqrt{\pi}}\right)\right),
</ipython-equation>
where
<ipython-equation>
\textrm{Si}\left(x\right)=\int_{0}^{x}\sin\left(\frac{\pi}{2}t^{2}\right)\, dt
</ipython-equation>.
is the Fresnel sine integral. Note that the numerically-computed integral is
within <ipython-inlineequation>1.04\times10^{-11}</ipython-inlineequation> of
the exact result --- well below the reported error
bound. 
</para>
<para>Infinite inputs are also allowed in quad by using 
<ipython-inlineequation>\pm</ipython-inlineequation> integrate.inf (or
inf) as one of the arguments. For example, suppose that a numerical value for
the exponential
integral:
<ipython-equation>E_{n}\left(x\right)=\int_{1}^{\infty}\frac{e^{-xt}}{t^{n}}\, dt
</ipython-equation>. is
desired (and the fact that this integral can be computed as special.expn(n,x) is
forgotten). The functionality of the function special.expn can be replicated by
defining a new function vec_expint based on the routine quad: 
</para>

<ipython-block logid="default-log"><ipython-cell type="input" number="8"/><ipython-cell type="input" number="9"/><ipython-cell type="input" number="10"/><ipython-cell type="input" number="11"/><ipython-cell type="input" number="12"/><ipython-cell type="output" number="12"/><ipython-cell type="input" number="13"/><ipython-cell type="output" number="13"/></ipython-block>
<para>The function which is integrated can even use the quad argument (though
the error bound may underestimate the error due to possible numerical error in
the integrand from the use of quad). The integral in this case is
<ipython-equation>
I_{n}=\int_{0}^{\infty}\int_{1}^{\infty}\frac{e^{-xt}}{t^{n}}\, dt\,
dx=\frac{1}{n}</ipython-equation>.
</para>
<ipython-block logid="default-log"><ipython-cell type="input" number="14"/><ipython-cell type="input" number="15"/><ipython-cell type="stdout" number="15"/><ipython-cell type="input" number="16"/><ipython-cell type="input" number="17"/><ipython-cell type="stdout" number="17"/><ipython-cell type="input" number="18"/><ipython-cell type="stdout" number="18"/></ipython-block>

<para>This last example shows that multiple integration can be handled using
repeated calls to quad. The mechanics of this for double and triple integration
have been wrapped up into the functions dblquad and tplquad. The function,
dblquad performs double integration. Use the help function to be sure that the
arguments are defined in the correct order. In addition, the limits on all inner
integrals are actually functions which can be constant functions. An example of
using double integration to compute several values of
<ipython-inlineequation>I_{n}</ipython-inlineequation> is shown below:
</para>

<ipython-block logid="default-log"><ipython-cell type="input" number="19"/><ipython-cell type="input" number="20"/><ipython-cell type="input" number="21"/><ipython-cell type="stdout" number="21"/><ipython-cell type="input" number="22"/><ipython-cell type="stdout" number="22"/><ipython-cell type="input" number="23"/><ipython-cell type="stdout" number="23"/></ipython-block>
</section>
<section>
<title>Gaussian quadrature (integrate.gauss_quadtol)</title>
<para>A few functions are also provided in order to perform simple Gaussian quadrature over a fixed interval. The first is fixed_quad which performs fixed-order Gaussian quadrature. The second function is quadrature which performs Gaussian quadrature of multiple orders until the difference in the integral estimate is beneath some tolerance supplied by the user. These functions both use the module special.orthogonal which can calculate the roots and quadrature weights of a large variety of orthogonal polynomials (the polynomials themselves are available as special functions returning instances of the polynomial class --- e.g. special.legendre). </para></section>
<section>
<title>Integrating using samples</title>
<para>There are three functions for computing integrals given only samples: trapz, simps, and romb. The first two functions use Newton-Coates formulas of order 1 and 2 respectively to perform integration. These two functions can handle, non-equally-spaced samples. The trapezoidal rule approximates the function as a straight line between adjacent points, while Simpson's rule approximates the function between three adjacent points as a parabola. </para><para>If the samples are equally-spaced and the number of samples available is
<ipython-inlineequation>2^{k}+1</ipython-inlineequation> for some integer 
<ipython-inlineequation>k</ipython-inlineequation>, then Romberg integration can be used to obtain
high-precision estimates of the integral using the available samples. Romberg
integration uses the trapezoid rule at step-sizes related by a power of two and
then performs Richardson extrapolation on these estimates to approximate the
integral with a higher-degree of accuracy. (A different interface to Romberg
integration useful when the function can be provided is also available as
integrate.romberg). 
</para>
</section>
<section>
<title>Ordinary differential equations (integrate.odeint)</title>
<para>Integrating a set of ordinary differential equations (ODEs) given initial
conditions is another useful example. The function odeint is available in SciPy
for integrating a first-order vector differential
equation:
<ipython-equation>\frac{d\mathbf{y}}{dt}=\mathbf{f}\left(\mathbf{y},t\right),</ipython-equation> 
given
initial conditions
<ipython-inlineequation>\mathbf{y}\left(0\right)=y_{0}</ipython-inlineequation>, where 
<ipython-inlineequation>\mathbf{y}</ipython-inlineequation> is a length
<ipython-inlineequation>N</ipython-inlineequation> vector and 
<ipython-inlineequation>\mathbf{f}</ipython-inlineequation> is a mapping from 
<ipython-inlineequation>\mathcal{R}^{N}</ipython-inlineequation> to 
<ipython-inlineequation>\mathcal{R}^{N}</ipython-inlineequation>. A
higher-order ordinary differential equation can always be reduced to a
differential equation of this type by introducing intermediate derivatives into
the <ipython-inlineequation>\mathbf{y}</ipython-inlineequation> vector. 
</para>
<para>
For example suppose it is desired to find the solution to the following
second-order differential equation:
<ipython-equation>\frac{d^{2}w}{dz^{2}}-zw(z)=0</ipython-equation> with initial
conditions
<ipython-inlineequation>w\left(0\right)=\frac{1}{\sqrt[3]{3^{2}}\Gamma\left(\frac{2}{3}\right)}</ipython-inlineequation> and
<ipython-inlineequation>\left.\frac{dw}{dz}\right|_{z=0}=-\frac{1}{\sqrt[3]{3}\Gamma\left(\frac{1}{3}\right)}</ipython-inlineequation>.
It is known that the solution to this differential equation with these boundary
conditions is the Airy function <ipython-equation>w=\textrm{Ai}\left(z\right)</ipython-equation>, which gives a means
to check the integrator using special.airy. 
</para>
<para>
First, convert this ODE into standard form by setting
<ipython-inlineequation>\mathbf{y}=\left[\frac{dw}{dz},w\right]</ipython-inlineequation>
and <ipython-inlineequation>t=z</ipython-inlineequation>. Thus, the differential equation
becomes
<ipython-equation>\frac{d\mathbf{y}}{dt}=\left[\begin{array}{c}
ty_{1}\\
y_{0}\end{array}\right]=\left[\begin{array}{cc}
0 &amp; t\\
1 &amp; 0\end{array}\right]\left[\begin{array}{c}
y_{0}\\
y_{1}\end{array}\right]=\left[\begin{array}{cc}
0 &amp; t\\
1 &amp; 0\end{array}\right]\mathbf{y}.</ipython-equation> 
In other words,
<ipython-equation>\mathbf{f}\left(\mathbf{y},t\right)=\mathbf{A}\left(t\right)\mathbf{y}. 
</ipython-equation>
</para>
<para>
As an interesting reminder, if
<ipython-inlineequation>\mathbf{A}\left(t\right)</ipython-inlineequation> commutes with
<ipython-inlineequation>\int_{0}^{t}\mathbf{A}\left(\tau\right)\,
d\tau</ipython-inlineequation>  under matrix multiplication,
then this linear differential equation has an exact solution using the matrix
exponential:
<ipython-equation>
\mathbf{y}\left(t\right)=\exp\left(\int_{0}^{t}\mathbf{A}\left(\tau\right)d\tau\right)\mathbf{y}\left(0\right),
</ipython-equation>
However, in this case,
<ipython-inlineequation>\mathbf{A}\left(t\right)</ipython-inlineequation> and its integral do not commute.
</para>
<para>There are many optional inputs and outputs available when using odeint which can help tune the solver. These additional inputs and outputs are not needed much of the time, however, and the three required input arguments and the output solution suffice. The required inputs are the function defining the derivative, fprime, the initial conditions vector, y0, and the time points to obtain a solution, t, (with the initial value point as the first element of this sequence). The output to odeint is a matrix where each row contains the solution vector at each requested time point (thus, the initial conditions are given in the first output row). </para><para>
The following example illustrates the use of odeint including the usage of the
Dfun option which allows the user to specify a gradient (with respect to
<ipython-inlineequation>\mathbf{y}</ipython-inlineequation>) of the function,
<ipython-inlineequation>\mathbf{f}\left(\mathbf{y},t\right)</ipython-inlineequation>.
</para>
<ipython-block logid="default-log"><ipython-cell type="input" number="24"/><ipython-cell type="input" number="25"/><ipython-cell type="input" number="26"/><ipython-cell type="input" number="27"/><ipython-cell type="input" number="28"/><ipython-cell type="input" number="29"/><ipython-cell type="input" number="30"/><ipython-cell type="input" number="31"/><ipython-cell type="input" number="32"/><ipython-cell type="input" number="33"/><ipython-cell type="input" number="34"/><ipython-cell type="input" number="35"/><ipython-cell type="input" number="36"/><ipython-cell type="input" number="37"/><ipython-cell type="input" number="38"/><ipython-cell type="stdout" number="38"/><ipython-cell type="input" number="39"/><ipython-cell type="stdout" number="39"/><ipython-cell type="input" number="40"/><ipython-cell type="stdout" number="40"/></ipython-block>


</section>
</sheet></notebook>
