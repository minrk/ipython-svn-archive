<notebook version="1"><head/><ipython-log id="default-log"/><sheet id="chapter01">
<title>Introduction</title>
<para>SciPy is a collection of mathematical algorithms and convenience functions
built on the Numeric extension for Python. It adds significant power to the
interactive Python session by exposing the user to high-level commands and
classes for the manipulation and visualization of data. With SciPy, an
interactive Python session becomes a data-processing and system-prototyping
environment rivaling sytems such as Matlab, IDL, Octave, R-Lab, and SciLab. 
</para>
<para>The additional power of using SciPy within Python, however, is that a powerful
programming language is also available for use in developing sophisticated
programs and specialized applications. Scientific applications written in SciPy
benefit from the development of additional modules in numerous niche's of the
software landscape by developers across the world. Everything from parallel
programming to web and data-base subroutines and classes have been made
available to the Python programmer. All of this power is available in addition
to the mathematical libraries in SciPy.
</para>
<para>This document provides a tutorial for the first-time user of SciPy to help get
started with some of the features available in this powerful package. It is
assumed that the user has already installed the package. Some general Python
facility is also assumed such as could be acquired by working through the
Tutorial in the Python distribution. For further introductory help the user is
directed to the Numeric documentation. Throughout this tutorial it is assumed
that the user has imported all of the names defined in the SciPy namespace using
the command
</para>
<para>XXX: ipython</para>

<section>
<title>General Help</title>
<para>Python provides the facility of documentation strings. The functions and
classes available in SciPy use this method for on-line documentation. There are
two methods for reading these messages and getting help. Python provides the
command <code>help</code> in the pydoc module. Entering this command with no
arguments (i.e. <code>In [1]: help</code>) launches an interactive help session
that allows searching through the keywords and modules available to all of
Python. Running the command help with an object as the argument displays the
calling signature, and the documentation string of the object.
</para>
<para>The pydoc method of help is sophisticated but uses a pager to
display the text. Sometimes this can interfere with the terminal you are running
the interactive session within. A scipy-specific help system is also available
under the command <code>scipy.info</code>. The signature and documentation string for the
object passed to the help command are printed to standard output (or to a
writeable object passed as the third argument). The second keyword argument of
<code>scipy.info</code> defines the maximum width of the line for printing. If a module is
passed as the argument to help than a list of the functions and classes defined
in that module is printed. For example:
</para>
<para>XXX: ipython</para>
<para>Another useful command is <code>source</code>. When given a function written in
Python as an argument, it prints out a listing of the source code for that
function. This can be helpful in learning about an algorithm or understanding
exactly what a function is doing with its arguments. Also don't forget about the
Python command <code>dir</code> which can be used to look at the namespace of a module or
package.
</para>
</section>

<section>
<title>SciPy Organization</title>
<para>SciPy is organized into subpackages covering different scientific
computing domains. Some common functions which several subpackages rely on live
under the <code>scipy_base</code> package which is installed at the same directory level as
the <code>scipy</code> package itself and could be installed separately. This allows for the
possibility of separately distributing the subpackages of <code>scipy</code> as long as
<code>scipy_base</code> package is provided as well. 
</para>
<para>Two other packages are installed at the higher-level:
scipy_distutils and weave. These two packages while distributed with main scipy
package could see use independently of scipy and so are treated as separate
packages and described elsewhere.
</para>
<para>The remaining subpackages are summarized in the following table (a * denotes an
optional sub-package that requires additional libraries to function or is not
available on all platforms). 
</para>
<para>XXX: Table here.</para>
<para>Because of their ubiquitousness, some of the functions in these
subpackages are also made available in the scipy namespace to ease their use in
interactive sessions and programs. In addition, many convenience functions are
located in the scipy_base package and the in the top-level of the scipy package.
Before looking at the sub-packages individually, we will first look at some of
these common functions. 
</para>
</section>
</sheet></notebook>